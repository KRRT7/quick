import matplotlib.figure
import numpy as np
from numpy.typing import NDArray
from qickit.backend import Backend
from qickit.circuit import Circuit
from qickit.types import Collection
from qiskit import QuantumCircuit # type: ignore

__all__ = ['QiskitCircuit']

class QiskitCircuit(Circuit):
    circuit: QuantumCircuit
    def __init__(self, num_qubits: int, num_clbits: int) -> None: ...
    def Identity(self, qubit_indices: int | Collection[int]) -> None: ...
    def X(self, qubit_indices: int | Collection[int]) -> None: ...
    def Y(self, qubit_indices: int | Collection[int]) -> None: ...
    def Z(self, qubit_indices: int | Collection[int]) -> None: ...
    def H(self, qubit_indices: int | Collection[int]) -> None: ...
    def S(self, qubit_indices: int | Collection[int]) -> None: ...
    def T(self, qubit_indices: int | Collection[int]) -> None: ...
    def RX(self, angle: float, qubit_index: int) -> None: ...
    def RY(self, angle: float, qubit_index: int) -> None: ...
    def RZ(self, angle: float, qubit_index: int) -> None: ...
    def U3(self, angles: Collection[float], qubit_index: int) -> None: ...
    def SWAP(self, first_qubit: int, second_qubit: int) -> None: ...
    def CX(self, control_index: int, target_index: int) -> None: ...
    def CY(self, control_index: int, target_index: int) -> None: ...
    def CZ(self, control_index: int, target_index: int) -> None: ...
    def CH(self, control_index: int, target_index: int) -> None: ...
    def CS(self, control_index: int, target_index: int) -> None: ...
    def CT(self, control_index: int, target_index: int) -> None: ...
    def CRX(self, angle: float, control_index: int, target_index: int) -> None: ...
    def CRY(self, angle: float, control_index: int, target_index: int) -> None: ...
    def CRZ(self, angle: float, control_index: int, target_index: int) -> None: ...
    def CU3(self, angles: Collection[float], control_index: int, target_index: int) -> None: ...
    def CSWAP(self, control_index: int, first_target_index: int, second_target_index: int) -> None: ...
    def MCX(self, control_indices: int | Collection[int], target_indices: int | Collection[int]) -> None: ...
    def MCY(self, control_indices: int | Collection[int], target_indices: int | Collection[int]) -> None: ...
    def MCZ(self, control_indices: int | Collection[int], target_indices: int | Collection[int]) -> None: ...
    def MCH(self, control_indices: int | Collection[int], target_indices: int | Collection[int]) -> None: ...
    def MCS(self, control_indices: int | Collection[int], target_indices: int | Collection[int]) -> None: ...
    def MCT(self, control_indices: int | Collection[int], target_indices: int | Collection[int]) -> None: ...
    def MCRX(self, angle: float, control_indices: int | Collection[int], target_indices: int | Collection[int]) -> None: ...
    def MCRY(self, angle: float, control_indices: int | Collection[int], target_indices: int | Collection[int]) -> None: ...
    def MCRZ(self, angle: float, control_indices: int | Collection[int], target_indices: int | Collection[int]) -> None: ...
    def MCU3(self, angles: Collection[float], control_indices: int | Collection[int], target_indices: int | Collection[int]) -> None: ...
    def MCSWAP(self, control_indices: int | Collection[int], first_target_index: int, second_target_index: int) -> None: ...
    def GlobalPhase(self, angle: float) -> None: ...
    measured: bool
    def measure(self, qubit_indices: int | Collection[int]) -> None: ...
    def get_statevector(self, backend: Backend | None = None) -> Collection[float]: ...
    def get_counts(self, num_shots: int, backend: Backend | None = None) -> dict[str, int]: ...
    def get_depth(self) -> int: ...
    def get_unitary(self) -> NDArray[np.number]: ...
    def transpile(self) -> None: ...
    def to_qasm(self) -> str: ...
    def draw(self) -> matplotlib.figure.Figure: ...
