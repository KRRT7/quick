import abc
import numpy as np
from abc import ABC, abstractmethod
from numpy.typing import NDArray
from qickit.circuit import Circuit
from typing import Callable

__all__ = ["Backend", "AerBackend"]

class Backend(ABC, metaclass=abc.ABCMeta):
    def __init__(self) -> None: ...
    @staticmethod
    def backendmethod(method: Callable) -> Callable: ...
    @abstractmethod
    def get_statevector(self, circuit: Circuit) -> NDArray[np.complex128]: ...
    @abstractmethod
    def get_operator(self, circuit: Circuit) -> NDArray[np.complex128]: ...
    @abstractmethod
    def get_counts(self, circuit: Circuit, num_shots: int) -> dict[str, int]: ...

class AerBackend(Backend):
    def __init__(self) -> None: ...
    def get_statevector(self, circuit: Circuit) -> NDArray[np.complex128]: ...
    def get_operator(self, circuit: Circuit) -> NDArray[np.complex128]: ...
    def get_counts(self, circuit: Circuit, num_shots: int) -> dict[str, int]: ...
