from typing import Iterator, Protocol, Self, TypeVar, overload

__all__ = ["Collection"]

T = TypeVar("T", covariant=True)

class Collection(Protocol[T]):
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[T]: ...
    @overload
    def __getitem__(self, idx: int) -> T: ...
    @overload
    def __getitem__(self, idx: slice) -> Self: ...
    def __add__(self, other: Self) -> Self: ...
    def __mul__(self, other: int) -> Self: ...
